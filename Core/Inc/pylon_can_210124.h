/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 37.0.2 Sun Jan 23 14:34:46 2022.
 */

#ifndef PYLON_CAN_210124_H
#define PYLON_CAN_210124_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define PYLON_CAN_210124_NETWORK_ALIVE_MSG_FRAME_ID (0x305u)
#define PYLON_CAN_210124_BATTERY_MANUFACTURER_FRAME_ID (0x35eu)
#define PYLON_CAN_210124_BATTERY_REQUEST_FRAME_ID (0x35cu)
#define PYLON_CAN_210124_BATTERY_ACTUAL_VALUES_U_IT_FRAME_ID (0x356u)
#define PYLON_CAN_210124_BATTERY_SO_C_SO_H_FRAME_ID (0x355u)
#define PYLON_CAN_210124_BATTERY_LIMITS_FRAME_ID (0x351u)
#define PYLON_CAN_210124_BATTERY_ERROR_WARNINGS_FRAME_ID (0x359u)

/* Frame lengths in bytes. */
#define PYLON_CAN_210124_NETWORK_ALIVE_MSG_LENGTH (8u)
#define PYLON_CAN_210124_BATTERY_MANUFACTURER_LENGTH (8u)
#define PYLON_CAN_210124_BATTERY_REQUEST_LENGTH (2u)
#define PYLON_CAN_210124_BATTERY_ACTUAL_VALUES_U_IT_LENGTH (6u)
#define PYLON_CAN_210124_BATTERY_SO_C_SO_H_LENGTH (4u)
#define PYLON_CAN_210124_BATTERY_LIMITS_LENGTH (8u)
#define PYLON_CAN_210124_BATTERY_ERROR_WARNINGS_LENGTH (7u)

/* Extended or standard frame types. */
#define PYLON_CAN_210124_NETWORK_ALIVE_MSG_IS_EXTENDED (0)
#define PYLON_CAN_210124_BATTERY_MANUFACTURER_IS_EXTENDED (0)
#define PYLON_CAN_210124_BATTERY_REQUEST_IS_EXTENDED (0)
#define PYLON_CAN_210124_BATTERY_ACTUAL_VALUES_U_IT_IS_EXTENDED (0)
#define PYLON_CAN_210124_BATTERY_SO_C_SO_H_IS_EXTENDED (0)
#define PYLON_CAN_210124_BATTERY_LIMITS_IS_EXTENDED (0)
#define PYLON_CAN_210124_BATTERY_ERROR_WARNINGS_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */
#define PYLON_CAN_210124_NETWORK_ALIVE_MSG_CYCLE_TIME_MS (1000u)
#define PYLON_CAN_210124_BATTERY_MANUFACTURER_CYCLE_TIME_MS (1000u)
#define PYLON_CAN_210124_BATTERY_REQUEST_CYCLE_TIME_MS (1000u)
#define PYLON_CAN_210124_BATTERY_ACTUAL_VALUES_U_IT_CYCLE_TIME_MS (1000u)
#define PYLON_CAN_210124_BATTERY_SO_C_SO_H_CYCLE_TIME_MS (1000u)
#define PYLON_CAN_210124_BATTERY_LIMITS_CYCLE_TIME_MS (1000u)
#define PYLON_CAN_210124_BATTERY_ERROR_WARNINGS_CYCLE_TIME_MS (1000u)

/* Signal choices. */


/**
 * Signals in message Network_alive_msg.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_network_alive_msg_t {
    /**
     * Range: -9223372036854780000..9223372036854780000 (-9.22337203685478E+18..9.22337203685478E+18 -)
     * Scale: 1
     * Offset: 0
     */
    int64_t alive_packet;
};

/**
 * Signals in message Battery_Manufacturer.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_battery_manufacturer_t {
    /**
     * Range: 0..18446744073709600000 (0..1.84467440737096E+19 -)
     * Scale: 1
     * Offset: 0
     */
    uint64_t manufaturer_string;
};

/**
 * Signals in message Battery_Request.
 *
 * Bit 5 is designed for inverter allows battery to shut down, and able to wake battery up to charge it.Bit 4 is designed for inverter doesn`t want battery to shut down, able to charge battery before shut down to avoid low energy.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_battery_request_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t full_charge_req;

    /**
     * For US2000B: Please use bit 5, the SOC range is: 15~19%. Bit 4 is NULL.For US2000B-Plus: Bit 5 the SOC range is 5~10%,
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t force_charge_req_ii;

    /**
     * For US2000B: Please use bit 5, the SOC range is: 15~19%. Bit 4 is NULL.For US2000B-Plus: Bit 5 the SOC range is 5~10%,
     *
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t force_charge_req_i;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t discharge_enable;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_enable;
};

/**
 * Signals in message Battery_actual_values_UIt.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_battery_actual_values_u_it_t {
    /**
     * Range: 0..32767 (0..327.67 V)
     * Scale: 0.01
     * Offset: 0
     */
    int16_t battery_voltage;

    /**
     * Range: -2500..2500 (-250..250 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_current;

    /**
     * Range: -500..750 (-50..75 Â°C)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_temperature;
};

/**
 * Signals in message Battery_SoC_SoH.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_battery_so_c_so_h_t {
    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t so_c;

    /**
     * Range: 0..100 (0..100 %)
     * Scale: 1
     * Offset: 0
     */
    uint16_t so_h;
};

/**
 * Signals in message Battery_limits.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_battery_limits_t {
    /**
     * Range: 0..750 (0..75 V)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_charge_voltage;

    /**
     * Range: 0..5000 (0..500 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_charge_current_limit;

    /**
     * Range: -5000..0 (-500..0 A)
     * Scale: 0.1
     * Offset: 0
     */
    int16_t battery_discharge_current_limit;

    /**
     * Range: 0..65535 (0..6553.5 V)
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t battery_discharge_voltage;
};

/**
 * Signals in message Battery_Error_Warnings.
 *
 * All signal values are as on the CAN bus.
 */
struct pylon_can_210124_battery_error_warnings_t {
    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t overvoltage_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t undervoltage_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t overtemperature_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t undertemperature_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t overcurrent_discharge_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_overcurrent_err;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t system_error;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t voltage_high_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t voltage_low_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature_high_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t temperature_low_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t discharge_current_high_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t charge_current_high_warn;

    /**
     * Range: 0..1 (0..1 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t internal_error_warn;

    /**
     * Range: 0..255 (0..255 -)
     * Scale: 1
     * Offset: 0
     */
    uint8_t module_numbers;
};

/**
 * Pack message Network_alive_msg.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_network_alive_msg_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_network_alive_msg_t *src_p,
    size_t size);

/**
 * Unpack message Network_alive_msg.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_network_alive_msg_unpack(
    struct pylon_can_210124_network_alive_msg_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int64_t pylon_can_210124_network_alive_msg_alive_packet_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_network_alive_msg_alive_packet_decode(int64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_network_alive_msg_alive_packet_is_in_range(int64_t value);

/**
 * Pack message Battery_Manufacturer.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_battery_manufacturer_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_battery_manufacturer_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Manufacturer.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_battery_manufacturer_unpack(
    struct pylon_can_210124_battery_manufacturer_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint64_t pylon_can_210124_battery_manufacturer_manufaturer_string_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_manufacturer_manufaturer_string_decode(uint64_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_manufacturer_manufaturer_string_is_in_range(uint64_t value);

/**
 * Pack message Battery_Request.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_battery_request_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_battery_request_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Request.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_battery_request_unpack(
    struct pylon_can_210124_battery_request_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_request_full_charge_req_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_request_full_charge_req_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_request_full_charge_req_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_request_force_charge_req_ii_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_request_force_charge_req_ii_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_request_force_charge_req_ii_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_request_force_charge_req_i_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_request_force_charge_req_i_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_request_force_charge_req_i_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_request_discharge_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_request_discharge_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_request_discharge_enable_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_request_charge_enable_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_request_charge_enable_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_request_charge_enable_is_in_range(uint8_t value);

/**
 * Pack message Battery_actual_values_UIt.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_battery_actual_values_u_it_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_battery_actual_values_u_it_t *src_p,
    size_t size);

/**
 * Unpack message Battery_actual_values_UIt.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_battery_actual_values_u_it_unpack(
    struct pylon_can_210124_battery_actual_values_u_it_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pylon_can_210124_battery_actual_values_u_it_battery_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_actual_values_u_it_battery_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_actual_values_u_it_battery_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pylon_can_210124_battery_actual_values_u_it_battery_current_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_actual_values_u_it_battery_current_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_actual_values_u_it_battery_current_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pylon_can_210124_battery_actual_values_u_it_battery_temperature_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_actual_values_u_it_battery_temperature_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_actual_values_u_it_battery_temperature_is_in_range(int16_t value);

/**
 * Pack message Battery_SoC_SoH.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_battery_so_c_so_h_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_battery_so_c_so_h_t *src_p,
    size_t size);

/**
 * Unpack message Battery_SoC_SoH.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_battery_so_c_so_h_unpack(
    struct pylon_can_210124_battery_so_c_so_h_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pylon_can_210124_battery_so_c_so_h_so_c_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_so_c_so_h_so_c_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_so_c_so_h_so_c_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pylon_can_210124_battery_so_c_so_h_so_h_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_so_c_so_h_so_h_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_so_c_so_h_so_h_is_in_range(uint16_t value);

/**
 * Pack message Battery_limits.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_battery_limits_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_battery_limits_t *src_p,
    size_t size);

/**
 * Unpack message Battery_limits.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_battery_limits_unpack(
    struct pylon_can_210124_battery_limits_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pylon_can_210124_battery_limits_battery_charge_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_limits_battery_charge_voltage_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_limits_battery_charge_voltage_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pylon_can_210124_battery_limits_battery_charge_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_limits_battery_charge_current_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_limits_battery_charge_current_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t pylon_can_210124_battery_limits_battery_discharge_current_limit_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_limits_battery_discharge_current_limit_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_limits_battery_discharge_current_limit_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t pylon_can_210124_battery_limits_battery_discharge_voltage_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_limits_battery_discharge_voltage_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_limits_battery_discharge_voltage_is_in_range(uint16_t value);

/**
 * Pack message Battery_Error_Warnings.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int pylon_can_210124_battery_error_warnings_pack(
    uint8_t *dst_p,
    const struct pylon_can_210124_battery_error_warnings_t *src_p,
    size_t size);

/**
 * Unpack message Battery_Error_Warnings.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int pylon_can_210124_battery_error_warnings_unpack(
    struct pylon_can_210124_battery_error_warnings_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_overvoltage_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_overvoltage_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_overvoltage_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_undervoltage_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_undervoltage_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_undervoltage_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_overtemperature_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_overtemperature_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_overtemperature_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_undertemperature_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_undertemperature_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_undertemperature_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_overcurrent_discharge_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_overcurrent_discharge_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_overcurrent_discharge_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_charge_overcurrent_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_charge_overcurrent_err_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_charge_overcurrent_err_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_system_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_system_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_system_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_voltage_high_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_voltage_high_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_voltage_high_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_voltage_low_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_voltage_low_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_voltage_low_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_temperature_high_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_temperature_high_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_temperature_high_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_temperature_low_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_temperature_low_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_temperature_low_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_discharge_current_high_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_discharge_current_high_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_discharge_current_high_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_charge_current_high_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_charge_current_high_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_charge_current_high_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_internal_error_warn_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_internal_error_warn_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_internal_error_warn_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t pylon_can_210124_battery_error_warnings_module_numbers_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double pylon_can_210124_battery_error_warnings_module_numbers_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool pylon_can_210124_battery_error_warnings_module_numbers_is_in_range(uint8_t value);


#ifdef __cplusplus
}
#endif

#endif
